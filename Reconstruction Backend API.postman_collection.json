{
	"info": {
		"_postman_id": "750106c4-e19b-449f-9e8c-16022dc22599",
		"name": "Reconstruction Backend API",
		"description": "Postman collection for the pluggable Reconstruction backend (FastAPI).\n\n**Available Models:**\n- Layout: `docling_layout_v1`\n- OCR: `tesseract_default`\n\n**File Upload Support:**\n- PNG, JPG, PDF files\n- Use `/infer-file` endpoint for direct file uploads\n- Use `/infer` endpoint for base64 encoded images\n\n**Response Format:**\n- `layout.boxes`: Array of detected layout elements with bbox coordinates\n- `ocr.tokens`: Array of OCR text tokens with bbox coordinates\n- `visualization`: Base64 encoded PNG overlay (optional)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32894704",
		"_collection_link": "https://planetary-desert-315596.postman.co/workspace/My-Workspace~070a057c-0089-4b38-8434-707e445eb7b7/collection/32894704-750106c4-e19b-449f-9e8c-16022dc22599?action=share&source=collection_link&creator=32894704"
	},
	"item": [
		{
			"name": "Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Response has status ok', function () { var json = pm.response.json(); pm.expect(json.status).to.eql('ok'); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if the API server is running and healthy."
			},
			"response": []
		},
		{
			"name": "List Models",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Contains model arrays', function () { var json = pm.response.json(); pm.expect(json).to.have.property('layout_models'); pm.expect(json).to.have.property('ocr_models'); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/models",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"models"
					]
				},
				"description": "Get list of available layout and OCR models."
			},
			"response": []
		},
		{
			"name": "Infer - Layout only (Base64)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Has results array', function () { var json = pm.response.json(); pm.expect(json.results).to.be.an('array'); });",
							"pm.test('First result has layout boxes', function () { var json = pm.response.json(); pm.expect(json.results[0].layout).to.have.property('boxes'); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputs\": [\n    { \"image_id\": \"page1\", \"image_b64\": \"{{sample_image_b64}}\" }\n  ],\n  \"layout_model\": \"docling_layout_v1\",\n  \"ocr_model\": null,\n  \"params\": { \"layout\": {}, \"ocr\": {} },\n  \"return_visualization\": true\n}"
				},
				"url": {
					"raw": "{{base_url}}/infer",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"infer"
					]
				},
				"description": "Run layout detection on base64 encoded image. Set sample_image_b64 variable to a data URL."
			},
			"response": []
		},
		{
			"name": "Infer - OCR only (Base64)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Has OCR tokens', function () { var json = pm.response.json(); pm.expect(json.results[0].ocr.tokens).to.be.an('array'); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputs\": [\n    { \"image_id\": \"page1\", \"image_b64\": \"{{sample_image_b64}}\" }\n  ],\n  \"layout_model\": null,\n  \"ocr_model\": \"tesseract_default\",\n  \"params\": { \"layout\": {}, \"ocr\": {} },\n  \"return_visualization\": true\n}"
				},
				"url": {
					"raw": "{{base_url}}/infer",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"infer"
					]
				},
				"description": "Run OCR extraction on base64 encoded image. Set sample_image_b64 variable to a data URL."
			},
			"response": []
		},
		{
			"name": "Infer File - Layout only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Has layout boxes', function () { var json = pm.response.json(); pm.expect(json.layout.boxes).to.be.an('array'); });",
							"pm.test('OCR tokens are empty', function () { var json = pm.response.json(); pm.expect(json.ocr.tokens).to.be.an('array'); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "Upload PNG, JPG, or PDF file",
							"type": "file",
							"src": []
						},
						{
							"key": "layout_model",
							"value": "docling_layout_v1",
							"description": "Layout detection model",
							"type": "text"
						},
						{
							"key": "ocr_model",
							"value": "",
							"description": "Leave empty for layout only",
							"type": "text"
						},
						{
							"key": "return_visualization",
							"value": "true",
							"description": "Return base64 visualization overlay",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/infer-file",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"infer-file"
					]
				},
				"description": "Upload a file and run layout detection only. Supports PNG, JPG, and PDF files."
			},
			"response": []
		},
		{
			"name": "Infer File - OCR only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Has OCR tokens', function () { var json = pm.response.json(); pm.expect(json.ocr.tokens).to.be.an('array'); });",
							"pm.test('Layout boxes are empty', function () { var json = pm.response.json(); pm.expect(json.layout.boxes).to.be.an('array'); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "Upload PNG, JPG, or PDF file",
							"type": "file",
							"src": []
						},
						{
							"key": "layout_model",
							"value": "",
							"description": "Leave empty for OCR only",
							"type": "text"
						},
						{
							"key": "ocr_model",
							"value": "tesseract_default",
							"description": "OCR extraction model",
							"type": "text"
						},
						{
							"key": "return_visualization",
							"value": "true",
							"description": "Return base64 visualization overlay",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/infer-file",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"infer-file"
					]
				},
				"description": "Upload a file and run OCR extraction only. Supports PNG, JPG, and PDF files."
			},
			"response": []
		},
		{
			"name": "Infer File - Layout + OCR",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Has layout boxes and OCR tokens', function () { var json = pm.response.json(); pm.expect(json.layout.boxes).to.be.an('array'); pm.expect(json.ocr.tokens).to.be.an('array'); });",
							"pm.test('Visualization is present when requested', function () { var json = pm.response.json(); pm.expect(json.visualization).to.be.a('string'); });",
							"pm.test('Response includes file metadata', function () { var json = pm.response.json(); pm.expect(json).to.have.property('filename'); pm.expect(json).to.have.property('content_type'); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"description": "Upload PNG, JPG, or PDF file",
							"type": "file",
							"src": []
						},
						{
							"key": "layout_model",
							"value": "docling_layout_v1",
							"description": "Layout detection model",
							"type": "text"
						},
						{
							"key": "ocr_model",
							"value": "tesseract_default",
							"description": "OCR extraction model",
							"type": "text"
						},
						{
							"key": "return_visualization",
							"value": "true",
							"description": "Return base64 visualization overlay",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/infer-file",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"infer-file"
					]
				},
				"description": "Upload a file and run both layout detection and OCR extraction. This is the most comprehensive analysis. Supports PNG, JPG, and PDF files."
			},
			"response": []
		},
		{
			"name": "Infer - Layout + OCR (Base64)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Has layout boxes and OCR tokens', function () { var json = pm.response.json(); pm.expect(json.results[0].layout.boxes).to.be.an('array'); pm.expect(json.results[0].ocr.tokens).to.be.an('array'); });",
							"pm.test('Visualization is present when requested', function () { var json = pm.response.json(); pm.expect(json.results[0].visualization).to.be.a('string'); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputs\": [\n    { \"image_id\": \"page1\", \"image_b64\": \"{{sample_image_b64}}\" }\n  ],\n  \"layout_model\": \"docling_layout_v1\",\n  \"ocr_model\": \"tesseract_default\",\n  \"params\": { \"layout\": {}, \"ocr\": {} },\n  \"return_visualization\": true\n}"
				},
				"url": {
					"raw": "{{base_url}}/infer",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"infer"
					]
				},
				"description": "Run both layout detection and OCR extraction on base64 encoded image. Set sample_image_b64 variable to a data URL."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000"
		},
		{
			"key": "sample_image_b64",
			"value": "data:image/png;base64,"
		}
	]
}